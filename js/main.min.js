(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendData = void 0;
var sendData = exports.sendData = function sendData(onSuccess, onFail, body) {
  fetch('#', {
    method: 'POST',
    body: body
  }).then(function (response) {
    if (response.ok) {
      onSuccess();
    } else {
      onFail();
    }
  }).catch(function () {
    onFail();
  });
};

},{}],2:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _countdown = require("./modules/countdown/countdown");
var _form = require("./modules/form/form");
var _messages = require("./modules/form/messages");
var _initAnimationPage = require("./modules/animation/init-animation-page");
var _openAccordion = require("./modules/accordions/open-accordion");
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  (0, _iosVhFix.iosVhFix)();

  // Modules
  // ---------------------------------
  (0, _countdown.initCountdown)();
  (0, _initAnimationPage.initAnimationPage)();
  (0, _openAccordion.openAccordion)();

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    (0, _form.setUserFormSubmit)(_messages.showSuccesMessage, _messages.showErrorMessage);
  });
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используется matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

},{"./modules/accordions/open-accordion":3,"./modules/animation/init-animation-page":4,"./modules/countdown/countdown":5,"./modules/form/form":6,"./modules/form/messages":7,"./utils/ios-vh-fix":9}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openAccordion = openAccordion;
var openAccordionButton = document.querySelector('.footer__button');
var accordionBlock = document.querySelector('.footer__events');
function openAccordion() {
  openAccordionButton.addEventListener('click', function () {
    accordionBlock.classList.add('is-active');
  });
}

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAnimationPage = void 0;
var animItems = document.querySelectorAll('.anim-items');
var initAnimationPage = exports.initAnimationPage = function initAnimationPage() {
  if (animItems.length > 0) {
    var animOnScroll = function animOnScroll() {
      for (var i = 0; i < animItems.length; i++) {
        var animItem = animItems[i];
        var animItemHeight = animItem.offsetHeight;
        var animItemOffset = offset(animItem).top;
        var animStart = 4;
        var animItemPoint = window.innerHeight - animItemHeight / animStart;
        if (animItemHeight > window.innerHeight) {
          animItemPoint = window.innerHeight - window.innerHeight / animStart;
        }
        if (scrollY > animItemOffset - animItemPoint && scrollY < animItemOffset + animItemHeight) {
          animItem.classList.add('anim-active');
        } else {
          if (!animItem.classList.contains('anim-no-hide')) {
            animItem.classList.remove('anim-active');
          }
        }
      }
      function offset(el) {
        var rect = el.getBoundingClientRect();
        var scrollLeft = window.scrollX || document.documentElement.scrollLeft;
        var scrollTop = window.scrollY || document.documentElement.scrollTop;
        return {
          top: rect.top + scrollTop,
          left: rect.left + scrollLeft
        };
      }
    };
    window.addEventListener('scroll', animOnScroll);
    setTimeout(function () {
      animOnScroll();
    }, 300);
  }
};

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initCountdown = initCountdown;
var targetDate = new Date('2024-07-24T00:00:00');
function initCountdown() {
  function updateCountdown() {
    var now = new Date();
    var remainingTime = targetDate - now;
    var days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));
    var hours = Math.floor(remainingTime % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
    var minutes = Math.floor(remainingTime % (1000 * 60 * 60) / (1000 * 60));
    var seconds = Math.floor(remainingTime % (1000 * 60) / 1000);
    document.getElementById('days').innerText = days.toString().padStart(2, '0');
    document.getElementById('hours').innerText = hours.toString().padStart(2, '0');
    document.getElementById('minutes').innerText = minutes.toString().padStart(2, '0');
    document.getElementById('seconds').innerText = seconds.toString().padStart(2, '0');
  }

  // Обновляем счетчик каждую секунду
  setInterval(updateCountdown, 1000);
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setUserFormSubmit = void 0;
var _api = require("../../api");
var form = document.querySelector('.footer__form');
var setUserFormSubmit = exports.setUserFormSubmit = function setUserFormSubmit(onSuccess, onFail) {
  form.addEventListener('submit', function (evt) {
    evt.preventDefault();
    (0, _api.sendData)(function () {
      onSuccess();
    }, function () {
      onFail();
    }, new FormData(evt.target));
  });
};

},{"../../api":1}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showSuccesMessage = exports.showErrorMessage = void 0;
var isEscape = function isEscape(evt) {
  return evt.key === 'Escape';
};
var successMessage = document.querySelector('#success').content.querySelector('.success');
var errorMessage = document.querySelector('#error').content.querySelector('.error');
var hideMessage = function hideMessage() {
  var existsMessage = document.querySelector('.success') || document.querySelector('.error');
  existsMessage.remove();
  document.removeEventListener('keydown', onMessageEscKeydown);
  document.body.removeEventListener('click', onBodyClick);
};
var onCloseButtonClick = function onCloseButtonClick() {
  hideMessage();
};
function onMessageEscKeydown(evt) {
  if (isEscape(evt)) {
    evt.preventDefault();
    hideMessage();
  }
}
function onBodyClick(evt) {
  if (evt.target.closest('.error__inner') || evt.target.closest('.success__inner')) {
    return;
  }
  hideMessage();
}
var showMessage = function showMessage(element, buttonClass) {
  document.body.append(element);
  document.body.addEventListener('click', onBodyClick);
  document.addEventListener('keydown', onMessageEscKeydown);
  element.querySelector(buttonClass).addEventListener('click', onCloseButtonClick);
  element.querySelector('.popup__close-btn').addEventListener('click', onCloseButtonClick);
};
var showSuccesMessage = exports.showSuccesMessage = function showSuccesMessage() {
  showMessage(successMessage, '.success__button');
};
var showErrorMessage = exports.showErrorMessage = function showErrorMessage() {
  showMessage(errorMessage, '.error__button');
};

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = exports.iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = exports.iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};

},{"./ios-checker":8}]},{},[2])


//# sourceMappingURL=main.min.js.map
